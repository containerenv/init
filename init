#!/usr/bin/env bash
#
# init wrapper

output() {
  echo "[$(date '+%m/%d/%Y %H:%M:%S')] $*"
}

# Clean services
output "cleaning up extra systemd unit files that don't apply in a container"
cd /lib/systemd/system/sysinit.target.wants/; ls | grep -v systemd-tmpfiles-setup | xargs rm -f $1 \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;

if ! grep 1000 < /etc/passwd >/dev/null 2>&1; then
  output "creating user / group"
  groupadd --gid 1000 "$USERNAME_CONFIG" || true
  useradd --gid 1000 --uid 1000 -G wheel -m "$USERNAME_CONFIG" || true

  if [[ -n "$DOCKER_GID" ]]; then
    output "enabling access to host docker"
    groupdel docker
    groupadd --gid "$DOCKER_GID" docker
    usermod -aG docker "$USERNAME_CONFIG"
    chgrp docker /var/run/docker.sock
  fi

cat << EOF > "/home/$USERNAME_CONFIG/.bashrc"
  #!/usr/bin/env bash
  # First init!

  echo "Welcome! Please delete this .bashrc and replace it with something better."
  echo ""

  if [[ ! -e "~/.xinitrc" ]] && [[ "\$X11_CONFIG" == "CONTAINER" ]]; then
    echo "Warning: No ~/.xinitrc exists. Running startx will fail."
    echo ""
  fi
EOF

  echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers
fi

if [[ "$PULSEAUDIO_CONFIG" == "HOST" ]]; then
  output "configuring pulseaudio to use the host's"
cat << EOF > /etc/pulse/client.conf
# Connect to the host's server using the mounted UNIX socket
default-server = unix:/run/user/1000/pulse/native

# Prevent a server running in the container
autospawn = no
daemon-binary = /bin/true

# Prevent the use of shared memory
enable-shm = false
EOF

fi

if [[ "$X11_CONFIG" == "CONTAINER" ]]; then
  output "configuring container to run X11"
cat << EOF > /etc/X11/Xwrapper.config
allowed_users=anybody
needs_root_rights=yes
EOF

  output " ... starting udevd"
  /usr/lib/systemd/systemd-udevd &
  udevadm trigger &
fi

# setup the default user target
systemctl set-default multi-user.target

output "launching systemd"
exec /lib/systemd/systemd --no-pager --log-level info